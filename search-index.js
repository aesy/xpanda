var searchIndex = JSON.parse('{\
"xpanda":{"doc":"","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Builder","Error","Xpanda","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone_into","col","default","default","eq","expand","fmt","from","from","from","into","into","into","line","message","ne","new","no_unset","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_env_vars","with_named_vars","with_positional_vars"],"q":["xpanda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","<code>Xpanda</code> substitutes the values of variables in strings …","","","","","","","Builds a new <code>Xpanda</code> instance.","","","","","","","","Expands the given text by substituting the values of the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","With this flag set, missing variables without any default …","","","","","","","","","","","Adds all environment variables as named variables.","Adds the given map values as named variables.","Adds the given strings as positional variables."],"i":[0,0,0,3,1,2,3,1,2,1,2,3,3,3,1,2,3,2,3,3,1,2,3,1,2,3,3,3,3,1,3,3,1,2,3,1,2,3,1,2,1,1,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[],1],[3,3],[[]],0,[[],1],[[],2],[[3,3],4],[[2,5],[[7,[6,3]]]],[[3,8],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[3,3],4],[[6,10,10],3],[[1,4],1],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],11],[[],11],[[],11],[1,1],[[1,[12,[6,6]]],1],[[1,[13,[6]]],1]],"p":[[3,"Builder"],[3,"Xpanda"],[3,"Error"],[15,"bool"],[15,"str"],[3,"String"],[4,"Result"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"TypeId"],[3,"HashMap"],[3,"Vec"]]},\
"xpanda_cli":{"doc":"","t":[0,5,0,3,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,12,12,11,11,11,11,11,12,5,5,5,5,5],"n":["args","main","read","Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","env_vars","fmt","from","from_arg_matches","from_arg_matches_mut","input_file","into","named_vars","no_unset","output_file","positional_vars","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","var_files","read_input_file","read_line","read_named_arg","read_output_file","read_var_file"],"q":["xpanda_cli","","","xpanda_cli::args","","","","","","","","","","","","","","","","","","","","","","","","xpanda_cli::read","","","",""],"d":["","","","Unix shell-like parameter expansion/variable substitution.","","","","","","","With this flag set, named variables will be sourced from …","","Returns the argument unchanged.","","","Provide a path to read from. This overrides the default …","Calls <code>U::from(self)</code>.","Adds a named variable to source from. The value should be …","With this flag set, missing variables without any default …","Provide a path to write to. This overrides the default …","Zero or more positional variable values. The first value …","","","","","","Provide a file to source variable values from.","","Reads the next line from stdin just like …","Tries to read a string in key=value format, returning the …","","Reads a file of key=value pairs, ignoring empty lines."],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0],"f":[0,[[],1],0,0,[2,2],[2,2],[[]],[[]],[[],2],[[],2],0,[[3,4],5],[[]],[6,[[8,[3,7]]]],[6,[[8,[3,7]]]],0,[[]],0,0,0,0,[[],8],[[],8],[[],9],[[3,6],[[8,[7]]]],[[3,6],[[8,[7]]]],0,[10,[[8,[11,12]]]],[[],[[13,[[8,[12,12]]]]]],[14,[[8,[12]]]],[10,[[8,[15,12]]]],[10,[[8,[[16,[12,12]],12]]]]],"p":[[3,"ExitCode"],[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"TypeId"],[3,"Path"],[8,"BufRead"],[3,"String"],[4,"Option"],[15,"str"],[8,"Write"],[3,"HashMap"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
